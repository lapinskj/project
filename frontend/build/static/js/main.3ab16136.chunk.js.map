{"version":3,"sources":["components/EditCustomerModal.js","components/Customers.js","components/EditMedicineModal.js","components/Medicines.js","components/SearchMedicines.js","components/MedicineOrders.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["EditCustomerModal","props","handleChange","e","target","name","value","activeItem","state","setState","this","toggle","onSave","Modal","isOpen","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","type","onChange","placeholder","surname","check","age","ModalFooter","Button","color","onClick","Component","Customers","refreshList","axios","get","then","res","customersList","data","catch","err","console","log","modal","handleSubmit","item","id","put","post","handleDelete","delete","createItem","editItem","renderCustomers","map","key","className","EditMedicineModal","price","Medicines","medicinesList","renderMedicines","SearchMedicines","searchValue","onSubmit","MedicineOrders","medicineOrdersList","Dashboard","App","exact","path","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3ab16136.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\n\nexport default class EditCustomerModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeItem: this.props.activeItem\n        };\n    }\n    handleChange = e => {\n        let { name, value } = e.target;\n        const activeItem = { ...this.state.activeItem, [name]: value };\n        this.setState({ activeItem });\n    };\n    render() {\n        const { toggle, onSave } = this.props;\n        return (\n            <Modal isOpen={true} toggle={toggle}>\n                <ModalHeader toggle={toggle}> Customer </ModalHeader>\n                <ModalBody>\n                    <Form>\n                        <FormGroup>\n                            <Label for=\"name\">Name</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"name\"\n                                value={this.state.activeItem.name}\n                                onChange={this.handleChange}\n                                placeholder=\"Enter Customer Name\"\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"surname\">Surname</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"surname\"\n                                value={this.state.activeItem.surname}\n                                onChange={this.handleChange}\n                                placeholder=\"Enter Customer Surname\"\n                            />\n                        </FormGroup>\n                        <FormGroup check>\n                            <Label for=\"age\"></Label>\n                            <Input\n                                type=\"number\"\n                                name=\"age\"\n                                value={this.state.activeItem.age}\n                                onChange={this.handleChange}\n                                placeholder=\"Enter Customer age\"\n                            />\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\n                        Save\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport EditCustomerModal from \"./EditCustomerModal\";\nimport axios from \"axios\";\n\n\nclass Customers extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            customersList: [],\n            activeItem: {\n                name: \"\",\n                surname: \"\",\n                age: null\n            },\n        };\n    }\n    componentDidMount() {\n        this.refreshList();\n    }\n    refreshList = () => {\n        axios\n            .get(\"customers/\")\n            .then(res => this.setState({ customersList: res.data }))\n            .catch(err => console.log(err));\n    };\n\n    toggle = () => {\n        this.setState({ modal: !this.state.modal });\n    };\n\n    handleSubmit = item => {\n        this.toggle();\n        if (item.id) {\n            axios\n                .put(`customers/${item.id}/`, item)\n                .then(res => this.refreshList());\n            return;\n        }\n        axios\n            .post(\"customers/\", item)\n            .then(res => this.refreshList());\n    };\n    handleDelete = item => {\n        axios\n            .delete(`customers/${item.id}`)\n            .then(res => this.refreshList());\n    };\n    createItem = () => {\n        const item = { name: \"\", surname: \"\", age: null };\n        this.setState({ activeItem: item, modal: !this.state.modal });\n    };\n    editItem = item => {\n        this.setState({ activeItem: item, modal: !this.state.modal });\n    };\n\n    renderCustomers = () => {\n        const customersItems = this.state.customersList;\n        return customersItems.map(item => (\n            <li key={item.id}>\n            <span>\n              {item.name} {item.surname} {item.age}\n            </span>\n                <span>\n              <button onClick={() => this.editItem(item)} className=\"btn btn-info ml-2\"> Edit </button>\n              <button onClick={() => this.handleDelete(item)} className=\"btn btn-danger ml-2\"> Delete </button>\n            </span>\n            </li>\n        ));\n    };\n\n    render() {\n        return (\n            <main className=\"content\">\n                <button onClick={this.createItem} className=\"btn btn-secondary\">\n                    Add customer\n                </button>\n                <ul>\n                    {this.renderCustomers()}\n                </ul>\n                {this.state.modal ? (\n                    <EditCustomerModal\n                        activeItem={this.state.activeItem}\n                        toggle={this.toggle}\n                        onSave={this.handleSubmit}\n                    />\n                ) : null}\n            </main>\n        );\n    }\n\n}\n\nexport default Customers;\n","import React, { Component } from \"react\";\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\n\nexport default class EditMedicineModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeItem: this.props.activeItem\n        };\n    }\n    handleChange = e => {\n        let { name, value } = e.target;\n        const activeItem = { ...this.state.activeItem, [name]: value };\n        this.setState({ activeItem });\n    };\n    render() {\n        const { toggle, onSave } = this.props;\n        return (\n            <Modal isOpen={true} toggle={toggle}>\n                <ModalHeader toggle={toggle}> Medicine </ModalHeader>\n                <ModalBody>\n                    <Form>\n                        <FormGroup>\n                            <Label for=\"name\">Name</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"name\"\n                                value={this.state.activeItem.name}\n                                onChange={this.handleChange}\n                                placeholder=\"Enter medicine name\"\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"age\"></Label>\n                            <Input\n                                type=\"number\"\n                                name=\"price\"\n                                value={this.state.activeItem.price}\n                                onChange={this.handleChange}\n                                placeholder=\"Enter medicine price\"\n                            />\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\n                        Save\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport EditMedicineModal from \"./EditMedicineModal\";\nimport axios from \"axios\";\n\n\nclass Medicines extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            medicinesList: [],\n            activeItem: {\n                name: \"\",\n                price: null\n            },\n        };\n    }\n    componentDidMount() {\n        this.refreshList();\n    }\n    refreshList = () => {\n        axios\n            .get(\"medicines/\")\n            .then(res => this.setState({ medicinesList: res.data }))\n            .catch(err => console.log(err));\n    };\n\n    toggle = () => {\n        this.setState({ modal: !this.state.modal });\n    };\n\n    handleSubmit = item => {\n        this.toggle();\n        if (item.id) {\n            axios\n                .put(`medicines/${item.id}/`, item)\n                .then(res => this.refreshList());\n            return;\n        }\n        axios\n            .post(\"medicines/\", item)\n            .then(res => this.refreshList());\n    };\n    handleDelete = item => {\n        axios\n            .delete(`medicines/${item.id}`)\n            .then(res => this.refreshList());\n    };\n    createItem = () => {\n        const item = { name: \"\", surname: \"\", age: null };\n        this.setState({ activeItem: item, modal: !this.state.modal });\n    };\n    editItem = item => {\n        this.setState({ activeItem: item, modal: !this.state.modal });\n    };\n\n    renderMedicines = () => {\n        const medicinesItems = this.state.medicinesList;\n        return medicinesItems.map(item => (\n            <li key={item.id}>\n            <span>\n              {item.name} {item.price}\n            </span>\n                <span>\n              <button onClick={() => this.editItem(item)} className=\"btn btn-info ml-2\"> Edit </button>\n              <button onClick={() => this.handleDelete(item)} className=\"btn btn-danger ml-2\"> Delete </button>\n            </span>\n            </li>\n        ));\n    };\n\n    render() {\n        return (\n            <main className=\"content\">\n                <div>\n                    <button onClick={this.createItem} className=\"btn btn-secondary\">\n                        Add medicine\n                    </button>\n                    <ul>\n                        {this.renderMedicines()}\n                    </ul>\n                </div>\n                {this.state.modal ? (\n                    <EditMedicineModal\n                        activeItem={this.state.activeItem}\n                        toggle={this.toggle}\n                        onSave={this.handleSubmit}\n                    />\n                ) : null}\n            </main>\n        );\n    }\n\n}\n\nexport default Medicines;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport {Button, Form, FormGroup, Input, Label} from \"reactstrap\";\n\n\nclass SearchMedicines extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            medicinesList: [],\n            searchValue: \"\"\n        };\n    }\n\n    componentDidUpdate() {\n        console.log(this.state.medicinesList)\n    }\n\n    handleChange = e => {\n        let { name, value } = e.target;\n        const searchValue = { [name]: value };\n        this.setState({ searchValue });\n    };\n\n    onSubmit = () => {\n        let searchValue = this.state.searchValue;\n        console.log(searchValue);\n        if (searchValue) {\n            axios\n                .get(`medicines/?name=${searchValue['name']}`, searchValue)\n                .then(res => this.setState({ medicinesList: res.data }))\n                .catch(err => console.log(err));\n            console.log(\"sent\");\n        }\n    };\n\n    renderMedicines = () => {\n        const medicinesItems = this.state.medicinesList;\n        return medicinesItems.map(item => (\n            <li key={item.id}>\n            <span>\n              {item.name} {item.price}\n            </span>\n            </li>\n        ));\n    };\n\n    render() {\n        return (\n            <main className=\"content\">\n                <Form>\n                    <FormGroup>\n                        <Label for=\"name\">Search medicine</Label>\n                        <Input\n                            type=\"text\"\n                            name=\"name\"\n                            onChange={this.handleChange}\n                            placeholder=\"Search by medicine name\"\n                        />\n                    </FormGroup>\n                </Form>\n                <Button color=\"primary\" onClick={this.onSubmit}>\n                    Search\n                </Button>\n                <div>\n                    <h6>Results:</h6>\n                    {this.renderMedicines()}\n                </div>\n                <p>End</p>\n            </main>\n        );\n    }\n\n\n}\n\nexport default SearchMedicines;","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\n\nclass MedicineOrders extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            medicineOrdersList: []\n        };\n    }\n    componentDidMount() {\n        this.refreshList();\n    }\n    refreshList = () => {\n        axios\n            .get(\"medicineOrders/\")\n            .then(res => this.setState({ medicineOrdersList: res.data }))\n            .catch(err => console.log(err));\n    };\n\n    toggle = () => {\n        this.setState({ modal: !this.state.modal });\n    };\n\n\n\n    renderCustomers = () => {\n        const medicineOrders = this.state.medicineOrdersList;\n        return medicineOrders.map(item => (\n            <li key={item.id}>\n            <span>\n              {item.name} {item.surname} {item.age}\n            </span>\n                <span>\n              <button onClick={() => this.editItem(item)} className=\"btn btn-info ml-2\"> Edit </button>\n              <button onClick={() => this.handleDelete(item)} className=\"btn btn-danger ml-2\"> Delete </button>\n            </span>\n            </li>\n        ));\n    };\n\n    render() {\n        return (\n            <main className=\"content\">\n                <ul>\n                    {this.renderCustomers()}\n                </ul>\n            </main>\n        );\n    }\n\n}\n\nexport default MedicineOrders;\n","import React, { Component } from \"react\";\n\n\nclass Dashboard extends Component{\n\n    render(){\n        return(\n            <h1>\n                Welcome to this great app!\n            </h1>\n        );\n    }\n}\n\nexport default Dashboard;","import React, { Component } from \"react\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport Customers from \"./components/Customers\"\nimport Medicines from \"./components/Medicines\"\nimport SearchMedicines from \"./components/SearchMedicines\";\nimport MedicineOrders from \"./components/MedicineOrders\";\nimport Dashboard  from \"./components/Dashboard\";\nimport './App.css';\n\n\n\nclass App extends Component {\n\n    render(){\n        return(\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Dashboard/>\n                    </Route>\n                    <Route exact path=\"/customers\">\n                        <Customers/>\n                    </Route>\n                    <Route exact path=\"/medicines\">\n                        <Medicines/>\n                    </Route>\n                    <Route exact path=\"/searchMedicines\">\n                        <SearchMedicines/>\n                    </Route>\n                    <Route exact path=\"/medicineOrders\">\n                        <MedicineOrders/>\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n    <App/>\n);\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}